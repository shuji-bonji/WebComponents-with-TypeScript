import{_ as t,c as i,o as a,a2 as e}from"./chunks/framework.d0B5J8SC.js";const c=JSON.parse('{"title":"Custom Elements","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/custom-elements.md","filePath":"concepts/custom-elements.md"}'),l={name:"concepts/custom-elements.md"};function n(h,s,p,o,d,r){return a(),i("div",null,s[0]||(s[0]=[e(`<h1 id="custom-elements" tabindex="-1">Custom Elements <a class="header-anchor" href="#custom-elements" aria-label="Permalink to &quot;Custom Elements&quot;">​</a></h1><p><strong>Custom Elements</strong> は、Web Components を構成する主要な仕様の1つであり、<strong>独自の HTML タグ（カスタム要素）を定義できる仕組み</strong>です。<br> HTML の拡張として、自分だけのタグを作成し、DOM に追加できるため、<br> 再利用性が高く、保守性の良い UI コンポーネントの作成が可能です。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><strong>補足: HTML タグ、要素、HTMLElement の違い</strong></p><table tabindex="0"><thead><tr><th>概念</th><th>説明</th><th>例</th></tr></thead><tbody><tr><td><strong>タグ</strong></td><td>HTML のマークアップに使用する要素の宣言部分<br> <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;my-element&gt;</code> など</td><td><code>&lt;my-element&gt;&lt;/my-element&gt;</code></td></tr><tr><td><strong>要素</strong></td><td>タグとその内部のコンテンツを含む、HTML ドキュメント内の構造体</td><td><code>&lt;p&gt;これは段落です。&lt;/p&gt;</code></td></tr><tr><td><strong>HTMLElement</strong></td><td>JavaScript で操作するためのオブジェクト。<code>document.createElement</code>で生成される</td><td><code>const el = document.createElement(&#39;div&#39;);</code></td></tr></tbody></table><ul><li>タグは「定義された要素」を HTML マークアップに表現するもの。</li><li>要素はタグ＋コンテンツ。</li><li>HTMLElement は要素を操作するための JavaScript オブジェクト。</li><li>カスタム要素は「クラス → タグ → 要素」の流れで生成される。</li></ul></div><h2 id="🔹-なぜ-custom-elements-が重要か" tabindex="-1">🔹 なぜ Custom Elements が重要か？ <a class="header-anchor" href="#🔹-なぜ-custom-elements-が重要か" aria-label="Permalink to &quot;🔹 なぜ Custom Elements が重要か？&quot;">​</a></h2><ul><li>UI部品をカプセル化し、再利用可能な形で構築できる</li><li>HTMLタグのように直感的に使える</li><li>フレームワークに依存しないため、他のプロジェクトやツールでもそのまま利用できる</li><li>テンプレート、Shadow DOM、イベントなど他の仕様と組み合わせることで、<strong>自己完結型のコンポーネント</strong>を実現できる</li></ul><h2 id="🔹-カスタム要素の生成フロー" tabindex="-1">🔹 カスタム要素の生成フロー <a class="header-anchor" href="#🔹-カスタム要素の生成フロー" aria-label="Permalink to &quot;🔹 カスタム要素の生成フロー&quot;">​</a></h2><ol><li><p><strong>クラスの定義</strong></p><ul><li><code>HTMLElement</code> を拡張して、カスタム要素のクラスを作成する。</li></ul></li><li><p><strong>タグの登録</strong></p><ul><li><code>customElements.define(&#39;my-custom-element&#39;, MyCustomElement);</code> を使ってタグを登録する。</li></ul></li><li><p><strong>HTML 内でタグを使う</strong></p><ul><li><code>&lt;my-custom-element&gt;&lt;/my-custom-element&gt;</code> として直接マークアップに使用できる。</li></ul></li></ol><h2 id="🔹-カスタム要素のクラス定義" tabindex="-1">🔹 カスタム要素のクラス定義 <a class="header-anchor" href="#🔹-カスタム要素のクラス定義" aria-label="Permalink to &quot;🔹 カスタム要素のクラス定義&quot;">​</a></h2><p>まず、最も基本的な Custom Element の実装例を示します。<br> 以下は <code>MyCustomElement.ts</code> の実装例です。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyCustomElement.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 親クラスのコンストラクタ呼び出し</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;open&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Shadow DOM の作成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  connectedCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.shadowRoot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;style&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        p {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          color: blue;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          font-size: 20px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;/style&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;p&gt;Hello, Web Component!&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// カスタム要素の登録</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-custom-element&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyCustomElement);</span></span></code></pre></div><h2 id="🔹-カスタム要素の登録" tabindex="-1">🔹 カスタム要素の登録 <a class="header-anchor" href="#🔹-カスタム要素の登録" aria-label="Permalink to &quot;🔹 カスタム要素の登録&quot;">​</a></h2><p>カスタム要素を使うためには、<code>customElements.define()</code> を用いてタグ名とクラスを関連付ける必要があります。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-custom-element&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyCustomElement);</span></span></code></pre></div><table tabindex="0"><thead><tr><th>引数</th><th>説明</th></tr></thead><tbody><tr><td><code>&#39;my-custom-element&#39;</code></td><td>カスタム要素のタグ名</td></tr><tr><td><code>MyCustomElement</code></td><td>定義するクラス</td></tr></tbody></table><h2 id="🔹-カスタム要素をdomへ追加" tabindex="-1">🔹 カスタム要素をDOMへ追加 <a class="header-anchor" href="#🔹-カスタム要素をdomへ追加" aria-label="Permalink to &quot;🔹 カスタム要素をDOMへ追加&quot;">​</a></h2><p>カスタム要素は登録後、HTML 内で次のように利用できます。</p><h3 id="📌-html-への直接宣言" tabindex="-1">📌 HTML への直接宣言 <a class="header-anchor" href="#📌-html-への直接宣言" aria-label="Permalink to &quot;📌 HTML への直接宣言&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-custom-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-custom-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="📌-javascript-での動的生成" tabindex="-1">📌 JavaScript での動的生成 <a class="header-anchor" href="#📌-javascript-での動的生成" aria-label="Permalink to &quot;📌 JavaScript での動的生成&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-custom-element&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myElement);</span></span></code></pre></div><h2 id="🔹-カスタム要素の命名規則" tabindex="-1">🔹 カスタム要素の命名規則 <a class="header-anchor" href="#🔹-カスタム要素の命名規則" aria-label="Permalink to &quot;🔹 カスタム要素の命名規則&quot;">​</a></h2><ul><li>カスタム要素のタグ名は <strong>ハイフン (<code>-</code>) を含む</strong> 必要があります。</li><li>これは標準の HTML タグとの衝突を避けるための仕様です。</li></ul><table tabindex="0"><thead><tr><th>正しい例</th><th>説明</th></tr></thead><tbody><tr><td><code>&lt;my-component&gt;</code></td><td>ハイフンが含まれているので有効</td></tr><tr><td><code>&lt;custom-button&gt;</code></td><td>有効なタグ名</td></tr><tr><td><code>&lt;button-custom&gt;</code></td><td>有効なタグ名</td></tr></tbody></table><table tabindex="0"><thead><tr><th>間違った例</th><th>説明</th></tr></thead><tbody><tr><td><code>&lt;mycomponent&gt;</code></td><td>ハイフンが含まれていないので無効</td></tr><tr><td><code>&lt;custombutton&gt;</code></td><td>無効なタグ名</td></tr><tr><td><code>&lt;header&gt;</code></td><td>標準タグと衝突するので無効</td></tr></tbody></table><h2 id="🔹-主な構成要素との関係" tabindex="-1">🔹 主な構成要素との関係 <a class="header-anchor" href="#🔹-主な構成要素との関係" aria-label="Permalink to &quot;🔹 主な構成要素との関係&quot;">​</a></h2><p>Custom Elements は、以下の仕様と組み合わせて使われることで、真に再利用可能な Web UI 部品として機能します。</p><ul><li><a href="/WebComponents-with-TypeScript/concepts/shadow-dom.html">Shadow DOM</a></li><li><a href="/WebComponents-with-TypeScript/concepts/html-templates.html">HTML Templates</a></li><li><a href="/WebComponents-with-TypeScript/typescript/slots-and-projection.html">Slot</a></li></ul><h2 id="🔹-カスタム要素の種類" tabindex="-1">🔹 カスタム要素の種類 <a class="header-anchor" href="#🔹-カスタム要素の種類" aria-label="Permalink to &quot;🔹 カスタム要素の種類&quot;">​</a></h2><p>Web Components のカスタム要素には、以下の 2 種類があります。</p><ul><li><strong>Autonomous Custom Elements</strong>: 完全に新しいタグ名として定義される要素です。</li><li><strong>Customized Built-in Elements</strong>: 既存の HTML 要素を拡張して新しい機能を追加する要素です。</li></ul><p>詳細な実装については <a href="./../typescript/custom-element-implementation.html">Custom Elementsの実装</a> を参照してください。</p><h2 id="🔹-まとめ" tabindex="-1">🔹 まとめ <a class="header-anchor" href="#🔹-まとめ" aria-label="Permalink to &quot;🔹 まとめ&quot;">​</a></h2><ul><li>Custom Elements は HTML を拡張し、独自の UI 部品を作成する技術です。</li><li>Autonomous と Customized の 2 種類が存在します。</li><li><code>customElements.define()</code> を使って登録後、HTML 内や JavaScript で利用可能です。</li><li>他の Web Components の仕様（Shadow DOM、HTML Templates、Slot）と密接に連携できます。</li></ul>`,33)]))}const m=t(l,[["render",n]]);export{c as __pageData,m as default};
