import{_ as t,c as a,o,a2 as r}from"./chunks/framework.d0B5J8SC.js";const _=JSON.parse('{"title":"ユースケース別パターン集","description":"","frontmatter":{},"headers":[],"relativePath":"patterns/index.md","filePath":"patterns/index.md"}'),l={name:"patterns/index.md"};function n(i,e,s,d,c,h){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="ユースケース別パターン集" tabindex="-1">ユースケース別パターン集 <a class="header-anchor" href="#ユースケース別パターン集" aria-label="Permalink to &quot;ユースケース別パターン集&quot;">​</a></h1><p>このセクションでは、Web Components の様々なユースケースに基づいたパターン集を紹介します。<br> 再利用性が高く、拡張性に優れたコンポーネント設計を学ぶことで、効率的な開発を実現します。</p><h2 id="🔹-学習内容" tabindex="-1">🔹 学習内容 <a class="header-anchor" href="#🔹-学習内容" aria-label="Permalink to &quot;🔹 学習内容&quot;">​</a></h2><ul><li><a href="./ts-input.html">入力部品（<code>&lt;ts-input&gt;</code>）</a></li><li><a href="./ts-toggle.html">ボタン／トグル（<code>&lt;ts-toggle&gt;</code>）</a></li><li><a href="./stateful-components.html">状態を持つ部品とステート管理</a></li><li><a href="./rxjs-integration.html">ストリーム連携（RxJSとの統合）</a></li><li><a href="./custom-events.html">イベント発火とカスタムイベントの型定義</a></li></ul><p>各トピックを学ぶことで、実用的な UI コンポーネントの構築方法や、状態管理、イベント駆動型の実装について深く理解することができます。<br> 特に <code>RxJS</code> との統合や <code>Custom Events</code> の型定義を通じて、複雑なアプリケーションでも拡張性のある設計が可能です。</p>',5)]))}const m=t(l,[["render",n]]);export{_ as __pageData,m as default};
