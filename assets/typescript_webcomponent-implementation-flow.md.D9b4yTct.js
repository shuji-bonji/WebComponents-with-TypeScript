import{_ as n,C as e,c as h,o as i,a2 as a,b as p,w as t,a as k,G as E,a3 as d}from"./chunks/framework.d0B5J8SC.js";const F=JSON.parse('{"title":"Web Component の実装フロー","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/webcomponent-implementation-flow.md","filePath":"typescript/webcomponent-implementation-flow.md"}'),r={name:"typescript/webcomponent-implementation-flow.md"};function o(g,s,y,c,m,C){const l=e("Mermaid");return i(),h("div",null,[s[1]||(s[1]=a(`<h1 id="web-component-の実装フロー" tabindex="-1">Web Component の実装フロー <a class="header-anchor" href="#web-component-の実装フロー" aria-label="Permalink to &quot;Web Component の実装フロー&quot;">​</a></h1><p>Web Component を実装する基本的な流れについて解説します。<br> このセクションでは、以下の 7 つのステップに分けて学習します。</p><h2 id="🔹-実装するの流れ" tabindex="-1">🔹 実装するの流れ <a class="header-anchor" href="#🔹-実装するの流れ" aria-label="Permalink to &quot;🔹 実装するの流れ&quot;">​</a></h2><p>Web Componentを実装する基本的な流れは以下に挙げている通りです。</p><ol><li><code>&lt;template&gt;</code> 要素で、UIの部品を作る</li><li><code>HTMLElement</code> を継承した CustomElementクラスを作る</li><li>CustomElementクラスに、Shadow Rootを定義し、これにtemplateをcloneNodeで append する</li><li>このCustom Elementにメソッドや、カスタムイベントを設定し、変化した場合のレンダリング方法を記述する</li><li>CSSもShadowRoot内に定義する。</li><li><code>&lt;slot&gt;</code> など利用して、他の要素を入れ込むような仕組みも作る</li><li>window.customElements に、この作ったCustomElementクラスを<code>customElements.define()</code> で登録する。</li><li>登録した、カスタム要素をHTMLにて利用する</li></ol><h2 id="🔹-1-template-要素で-ui-を作成" tabindex="-1">🔹 1. Template 要素で UI を作成 <a class="header-anchor" href="#🔹-1-template-要素で-ui-を作成" aria-label="Permalink to &quot;🔹 1. Template 要素で UI を作成&quot;">​</a></h2><p>まずは、<code>&lt;template&gt;</code> 要素を使って UI の構造を定義します。<br><code>&lt;template&gt;</code> 内の内容は初期状態では DOM に追加されず、<code>cloneNode</code> を使って複製することで利用します。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;これはテンプレートです。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="🔹-2-htmlelement-を継承した-custom-element-を作成" tabindex="-1">🔹 2. HTMLElement を継承した Custom Element を作成 <a class="header-anchor" href="#🔹-2-htmlelement-を継承した-custom-element-を作成" aria-label="Permalink to &quot;🔹 2. HTMLElement を継承した Custom Element を作成&quot;">​</a></h2><p>次に、<code>HTMLElement</code> を継承してカスタム要素のクラスを作成します。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-element&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyElement);</span></span></code></pre></div><h2 id="🔹-3-shadow-root-の作成と-template-の適用" tabindex="-1">🔹 3. Shadow Root の作成と Template の適用 <a class="header-anchor" href="#🔹-3-shadow-root-の作成と-template-の適用" aria-label="Permalink to &quot;🔹 3. Shadow Root の作成と Template の適用&quot;">​</a></h2><p><code>attachShadow</code> メソッドを使って Shadow Root を定義し、<br><code>template</code> の内容を <code>cloneNode</code> で複製して追加します。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shadow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;open&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // テンプレートを複製して追加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-template&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLTemplateElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shadow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(template.content.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cloneNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-element&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyElement);</span></span></code></pre></div><h2 id="🔹-4-メソッドやカスタムイベントの定義" tabindex="-1">🔹 4. メソッドやカスタムイベントの定義 <a class="header-anchor" href="#🔹-4-メソッドやカスタムイベントの定義" aria-label="Permalink to &quot;🔹 4. メソッドやカスタムイベントの定義&quot;">​</a></h2><p>カスタム要素にメソッドを定義し、状態の更新やイベントの発火を行います。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> paragraph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.shadowRoot?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (paragraph) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      paragraph.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="🔹-5-shadow-root-内に-css-を定義" tabindex="-1">🔹 5. Shadow Root 内に CSS を定義 <a class="header-anchor" href="#🔹-5-shadow-root-内に-css-を定義" aria-label="Permalink to &quot;🔹 5. Shadow Root 内に CSS を定義&quot;">​</a></h2><p>Shadow DOM 内部に CSS を定義することで、外部のスタイルから独立したデザインを持たせます。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">darkgreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;独立したスタイルの要素です。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="🔹-6-slot-を使って外部要素の投影" tabindex="-1">🔹 6. Slot を使って外部要素の投影 <a class="header-anchor" href="#🔹-6-slot-を使って外部要素の投影" aria-label="Permalink to &quot;🔹 6. Slot を使って外部要素の投影&quot;">​</a></h2><p>Slot を使うことで、外部から渡された要素を指定した位置に投影できます。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;外部の内容がここに表示されます。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="🔹-7-custom-elements-の定義と登録" tabindex="-1">🔹 7. Custom Elements の定義と登録 <a class="header-anchor" href="#🔹-7-custom-elements-の定義と登録" aria-label="Permalink to &quot;🔹 7. Custom Elements の定義と登録&quot;">​</a></h2><p>最後に、<code>customElements.define()</code> で Web Component として登録します。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-element&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyElement);</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="🔹-8-カスタム要素の-html-への利用" tabindex="-1">🔹 8. カスタム要素の HTML への利用 <a class="header-anchor" href="#🔹-8-カスタム要素の-html-への利用" aria-label="Permalink to &quot;🔹 8. カスタム要素の HTML への利用&quot;">​</a></h2><p>定義したカスタム要素は、通常の HTML 要素と同じように利用できます。<br><code>index.html</code> 内でタグを宣言するだけで、Web Component として認識されます。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ja&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Web Component の利用例&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- カスタム要素の利用 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="🔹-web-component-実装図" tabindex="-1">🔹 Web Component 実装図 <a class="header-anchor" href="#🔹-web-component-実装図" aria-label="Permalink to &quot;🔹 Web Component 実装図&quot;">​</a></h2>`,32)),(i(),p(d,null,{default:t(()=>[E(l,{id:"mermaid-115",class:"mermaid",graph:"flowchart%20TB%0A%20%20%20%20A%40%7B%20shape%3A%20circle%2C%20label%3A%20%221%22%20%7D%0A%20%20%20%20A%20---%3E%20%7C%221%5C.%20Template%E3%82%92%E4%BD%9C%E3%82%8B%22%7CTemplate%0A%0A%20%20%20%20subgraph%20Template%5B%22Template%22%5D%0A%20%20%20%20%20%20%20%20style%20Template%20fill%3A%235DADE2%2Cstroke%3A%23FFFFFF%2Cstroke-width%3A1px%0A%20%20%20%20%20%20%20%20SL%5BSlot%5D%0A%20%20%20%20%20%20%20%20CS%5BCSS%5D%0A%20%20%20%20end%0A%20%20%20%20Template%20---%3E%7CcloneNode%20%E3%81%A7%E8%A4%87%E8%A3%BD%7C%20CustomElement%0A%20%20%20%20Template%20---%3E%7C3.2.%20Shadow%20Root%20%E3%81%AB%E9%81%A9%E7%94%A8%7C%20SH%0A%20%20%20%20SL%20---%3E%7C6%5C.%20%E5%A4%96%E9%83%A8%E8%A6%81%E7%B4%A0%E3%81%AE%E6%8C%BF%E5%85%A5%7C%20SH%0A%20%20%20%20CS%20---%3E%7C5%5C.%20CSS%20%E5%AE%9A%E7%BE%A9%7C%20SH%0A%0A%20%20%20%20B%40%7B%20shape%3A%20circle%2C%20label%3A%20%222%22%20%7D%0A%20%20%20%20B%20---%3E%20%7C%222%5C.%20CustomElement%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E5%AE%9A%E7%BE%A9%22%7CCustomElement%0A%0A%20%20%20%20subgraph%20CustomElement%5B%22Custom%20Element%20%E3%82%AF%E3%83%A9%E3%82%B9%22%5D%0A%20%20%20%20%20%20%20%20style%20CustomElement%20fill%3A%235D8DE2%2Cstroke%3A%23FFFFFF%2Cstroke-width%3A1px%0A%20%20%20%20%20%20%20%20SH%5BShadow%20DOM%5D%0A%20%20%20%20%20%20%20%20M%5B%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%5D%0A%20%20%20%20%20%20%20%20I%5B%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%5D%0A%20%20%20%20%20%20%20%20C%40%7B%20shape%3A%20circle%2C%20label%3A%20%223%22%20%7D%0A%20%20%20%20%20%20%20%20E%40%7B%20shape%3A%20circle%2C%20label%3A%20%224%22%20%7D%0A%20%20%20%20%20%20%20%20C%20--%3E%7C%223.1.%20attachShadow()%20%E3%81%A7%20Shadow%20Root%20%E4%BD%9C%E6%88%90%22%7C%20SH%0A%20%20%20%20%20%20%20%20E%20--%3E%7C%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9A%E7%BE%A9%7C%20M%0A%20%20%20%20%20%20%20%20E%20--%3E%7C%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E5%AE%9A%E7%BE%A9%7C%20I%0A%20%20%20%20end%0A%20%20%20%20SH%20---%3E%20%7CDOM%20%E3%81%B8%E6%8F%8F%E7%94%BB%7C%20CET%0A%20%20%20%20CustomElement%20---%3E%20%7C%227%5C.%20customElements.define()%E3%81%A7%E7%99%BB%E9%8C%B2%22%7C%20WC%0A%0A%20%20%20%20subgraph%20html%5B%22html%22%5D%0A%20%20%20%20%20%20%20%20L%5BLight%20DOM%5D%0A%20%20%20%20%20%20%20%20CET%5B%22CustomElement%E3%82%BF%E3%82%B0%22%5D%0A%20%20%20%20end%0A%20%20%20%20L%20---%3E%20%7C6%5C.%20Slot%E3%82%92%E9%80%9A%E3%81%98%E3%81%A6%7C%20SL%20%20%20%20%0A%0A%20%20%20%20subgraph%20mainjs%5B%22main.js%22%5D%0A%20%20%20%20%20%20%20%20WC%5BWindow.customElements%5D%0A%20%20%20%20end%0A%20%20%20%20WC%20--%3E%20%7C%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E8%A6%81%E7%B4%A0%E3%81%AE%E5%88%A9%E7%94%A8%7C%20CET%0A"})]),fallback:t(()=>s[0]||(s[0]=[k(" Loading... ")])),_:1})),s[2]||(s[2]=a('<h2 id="🔹-まとめ" tabindex="-1">🔹 まとめ <a class="header-anchor" href="#🔹-まとめ" aria-label="Permalink to &quot;🔹 まとめ&quot;">​</a></h2><ol><li><code>&lt;template&gt;</code> 要素で基本構造を定義</li><li><code>HTMLElement</code> を継承してクラスを作成</li><li>Shadow DOM と Template を結合</li><li>メソッドやカスタムイベントを追加</li><li>内部に独立した CSS を定義</li><li><code>&lt;slot&gt;</code> を活用して外部要素の投影</li><li><code>customElements.define()</code> で登録</li><li><strong>HTML 内でタグとして利用</strong></li></ol><p>Web Component の基本的な流れが一通り完結しました。<br> 次のセクションでは、この流れを実際のプロジェクトに適用していきます。</p>',3))])}const u=n(r,[["render",o]]);export{F as __pageData,u as default};
