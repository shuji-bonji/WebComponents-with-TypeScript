import{_ as t,c as a,o,a2 as i}from"./chunks/framework.d0B5J8SC.js";const h=JSON.parse('{"title":"TypeScriptでの実装方法","description":"Web Components を TypeScript で実装するための基本構成と実装手順を体系的に解説。カスタム要素の定義から Shadow DOM、属性とプロパティのバインディング、スロット活用まで、段階的に学べる構成です。","frontmatter":{"title":"TypeScriptでの実装方法","description":"Web Components を TypeScript で実装するための基本構成と実装手順を体系的に解説。カスタム要素の定義から Shadow DOM、属性とプロパティのバインディング、スロット活用まで、段階的に学べる構成です。"},"headers":[],"relativePath":"typescript/index.md","filePath":"typescript/index.md"}'),n={name:"typescript/index.md"};function p(r,e,l,s,c,d){return o(),a("div",null,e[0]||(e[0]=[i('<h1 id="typescriptでの実装方法" tabindex="-1">TypeScriptでの実装方法 <a class="header-anchor" href="#typescriptでの実装方法" aria-label="Permalink to &quot;TypeScriptでの実装方法&quot;">​</a></h1><p>このセクションでは、Web Components を TypeScript で実装する方法を学びます。<br> 各トピックは、カスタム要素の定義から Shadow DOM、属性とプロパティのバインディングまで、体系的に理解できるように構成されています。</p><h2 id="🔹-学習内容" tabindex="-1">🔹 学習内容 <a class="header-anchor" href="#🔹-学習内容" aria-label="Permalink to &quot;🔹 学習内容&quot;">​</a></h2><ul><li><a href="./webcomponent-implementation-flow.html">Web Component の実装フロー</a></li><li><a href="./custom-element-implementation.html">Custom Elementsの実装</a></li><li><a href="./lifecycle-and-events.html">TypeScriptでWebComponentsライフサイクル実装</a></li><li><a href="./shadow-dom-in-ts.html">Shadow DOM構造をTSで記述</a></li><li><a href="./attribute-property-binding.html">属性とプロパティのバインディング</a></li><li><a href="./slots-and-projection.html">slotsとcontentの投影</a></li></ul><p>各トピックを順番に進めることで、Web Components を TypeScript で構築する基礎と応用を習得できます。<br> また、<code>Shadow DOM</code> や <code>slots</code> を活用することで、カプセル化と再利用性の高い UI コンポーネントの構築が可能です。</p>',5)]))}const _=t(n,[["render",p]]);export{h as __pageData,_ as default};
