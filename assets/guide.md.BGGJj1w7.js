import{_ as t,c as a,o as l,a2 as i}from"./chunks/framework.d0B5J8SC.js";const d=JSON.parse('{"title":"ガイド目次","description":"TypeScriptでWeb Componentsを学ぶためのガイド。基本知識から応用パターン、テスト、実践アーキテクチャまで段階的に学習可能。","frontmatter":{"description":"TypeScriptでWeb Componentsを学ぶためのガイド。基本知識から応用パターン、テスト、実践アーキテクチャまで段階的に学習可能。"},"headers":[],"relativePath":"guide.md","filePath":"guide.md"}'),s={name:"guide.md"};function o(r,e,n,h,c,p){return l(),a("div",null,e[0]||(e[0]=[i('<h1 id="ガイド目次" tabindex="-1">ガイド目次 <a class="header-anchor" href="#ガイド目次" aria-label="Permalink to &quot;ガイド目次&quot;">​</a></h1><p>このページでは、「TypeScript で Web Components を学ぶ」ための学習ガイドの全体像を示します。以下の各セクションは、段階的に理解と実装を深めていくために構成されています。</p><h2 id="_1-基本知識" tabindex="-1">1. <a href="./concepts/">基本知識</a> <a class="header-anchor" href="#_1-基本知識" aria-label="Permalink to &quot;1. [基本知識](./concepts/)&quot;">​</a></h2><ul><li><a href="./concepts/webcomponents-overview.html">WebComponentsとは？</a></li><li><a href="./concepts/custom-elements.html">Custom Elements</a></li><li><a href="./concepts/custom-element-lifecycle.html">Custom Element のライフサイクル</a></li><li><a href="./concepts/shadow-dom.html">Shadow DOM</a></li><li><a href="./concepts/html-templates.html">HTML Templates</a></li><li><a href="./concepts/template-slot-integration.html">Template と Slot の連携</a></li><li><a href="./concepts/es-modules.html">ES Modules</a></li><li><a href="./concepts/standards-position.html">Web標準としての位置づけ</a></li><li><a href="./concepts/why-typescript.html">TypeScriptを使う理由とメリット</a></li></ul><h2 id="_2-typescriptで-web-components-の実装方法" tabindex="-1">2. <a href="./typescript/">TypeScriptで Web Components の実装方法</a> <a class="header-anchor" href="#_2-typescriptで-web-components-の実装方法" aria-label="Permalink to &quot;2. [TypeScriptで Web Components の実装方法](./typescript/)&quot;">​</a></h2><ul><li><a href="./typescript/webcomponent-implementation-flow.html">Web Component の実装フロー</a></li><li><a href="./typescript/custom-element-implementation.html">Custom Elementsの実装</a></li><li><a href="./typescript/lifecycle-and-events.html">ライフサイクルメソッドと型安全なイベント処理</a></li><li><a href="./typescript/shadow-dom-in-ts.html">Shadow DOM構造をTSで記述</a></li><li><a href="./typescript/attribute-property-binding.html">属性とプロパティのバインディング</a></li></ul><ul><li><a href="./typescript/slots-and-projection.html">slotsとcontentの投影</a></li></ul><h2 id="_3-css設計とベストプラクティス" tabindex="-1">3. <a href="./css/">CSS設計とベストプラクティス</a> <a class="header-anchor" href="#_3-css設計とベストプラクティス" aria-label="Permalink to &quot;3. [CSS設計とベストプラクティス](./css/)&quot;">​</a></h2><ul><li><a href="./css/bem-overview.html">BEM（Block Element Modifier）設計の基本</a></li><li><a href="./css/host-based-css-shadow-dom.html">Host-based CSS と Shadow DOM</a></li><li><a href="./css/scoped-css-shadow-dom.html">Scoped CSS と Shadow DOM</a></li><li><a href="./css/css-variables-theming.html">CSS Variables を用いたテーマ管理</a></li></ul><h2 id="_4-ユースケース別パターン集" tabindex="-1">4. <a href="./patterns/">ユースケース別パターン集</a> <a class="header-anchor" href="#_4-ユースケース別パターン集" aria-label="Permalink to &quot;4. [ユースケース別パターン集](./patterns/)&quot;">​</a></h2><ul><li><a href="./patterns/ts-input.html">入力部品（<code>&lt;ts-input&gt;</code>）</a></li><li><a href="./patterns/ts-toggle.html">ボタン／トグル（<code>&lt;ts-toggle&gt;</code>）</a></li><li><a href="./patterns/stateful-components.html">状態を持つ部品とステート管理</a></li><li><a href="./patterns/rxjs-integration.html">ストリーム連携（RxJSとの統合）</a></li><li><a href="./patterns/custom-events.html">イベント発火とカスタムイベントの型定義</a></li></ul><h2 id="_5-テストとデバッグ" tabindex="-1">5. <a href="./testing/">テストとデバッグ</a> <a class="header-anchor" href="#_5-テストとデバッグ" aria-label="Permalink to &quot;5. [テストとデバッグ](./testing/)&quot;">​</a></h2><ul><li><a href="./testing/unit-testing.html">Unit Test（Vitest / Web Test Runner）</a></li><li><a href="./testing/shadow-dom-testing.html">Shadow DOM内の要素テスト</a></li><li><a href="./testing/e2e-testing.html">E2Eテスト事例（Playwrightなど）</a></li></ul><h2 id="_6-実践アーキテクチャ" tabindex="-1">6. 実践アーキテクチャ <a class="header-anchor" href="#_6-実践アーキテクチャ" aria-label="Permalink to &quot;6. 実践アーキテクチャ&quot;">​</a></h2><h2 id="_7-補足情報" tabindex="-1">7. 補足情報 <a class="header-anchor" href="#_7-補足情報" aria-label="Permalink to &quot;7. 補足情報&quot;">​</a></h2>',15)]))}const f=t(s,[["render",o]]);export{d as __pageData,f as default};
