import{_ as t,c as i,o as a,a2 as l}from"./chunks/framework.d0B5J8SC.js";const d=JSON.parse('{"title":"はじめに","description":"Web Components を TypeScript で学ぶための導入ガイド。フレームワークに依存しない純粋な Web 技術による開発、型安全な設計パターンの習得、再利用可能な UI パーツの構築方法を体系的に解説します。","frontmatter":{"title":"はじめに","description":"Web Components を TypeScript で学ぶための導入ガイド。フレームワークに依存しない純粋な Web 技術による開発、型安全な設計パターンの習得、再利用可能な UI パーツの構築方法を体系的に解説します。"},"headers":[],"relativePath":"introduction.md","filePath":"introduction.md"}'),r={name:"introduction.md"};function o(p,e,n,s,c,h){return a(),i("div",null,e[0]||(e[0]=[l('<h1 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h1><p>Web Components は、再利用可能でカプセル化された UI コンポーネントを Web 標準技術のみで構築できる仕組みです。React や Vue などのフレームワークを用いずとも、HTML・CSS・JavaScript（TypeScript）だけでコンポーネント志向の開発が可能になります。</p><p>このサイトでは、TypeScript を活用して型安全に Web Components を開発する方法を体系的に学べるよう、基礎から応用まで段階的に整理しています。</p><h2 id="このドキュメントの目的" tabindex="-1">このドキュメントの目的 <a class="header-anchor" href="#このドキュメントの目的" aria-label="Permalink to &quot;このドキュメントの目的&quot;">​</a></h2><ul><li>フレームワークに依存しない、純粋な Web 技術による開発を学ぶ</li><li>Web Components の 各仕様（Custom Elements, Shadow DOM など）を正確に理解する</li><li>TypeScript による 型安全な設計パターンとベストプラクティスを習得する</li><li>再利用可能な UI パーツを構築し、モダンな設計（Micro Frontends など）にも対応できる力を養う</li></ul><h2 id="想定する読者" tabindex="-1">想定する読者 <a class="header-anchor" href="#想定する読者" aria-label="Permalink to &quot;想定する読者&quot;">​</a></h2><ul><li>TypeScript を使って、フレームワークに依存しない Web UI を構築したい方</li><li>Web Components の各技術要素（Custom Elements, Shadow DOM など）を基礎から学びたい方</li><li>UI を部品化・モジュール化して、再利用可能な設計を追求したい開発者</li><li>将来的に Web Components を他のフレームワークと連携させたいと考えている方</li></ul><h2 id="対象技術と開発環境" tabindex="-1">対象技術と開発環境 <a class="header-anchor" href="#対象技術と開発環境" aria-label="Permalink to &quot;対象技術と開発環境&quot;">​</a></h2><p>このサイトで扱う主な技術は以下の通りです。</p><ul><li>TypeScript（型注釈と補完による安全な開発体験） <ul><li>Web Components 4仕様 <ul><li>Custom Elements</li><li>Shadow DOM</li><li>HTML Template</li><li>Slot</li></ul></li></ul></li><li>Vite + VanillaJS 環境</li><li>開発テンプレート → <a href="https://github.com/shuji-bonji/typescript-webcomponents-starter-kit" target="_blank" rel="noreferrer">typescript-webcomponents-starter-kit</a></li></ul><h2 id="なぜ-typescript-で学ぶのか" tabindex="-1">なぜ TypeScript で学ぶのか？ <a class="header-anchor" href="#なぜ-typescript-で学ぶのか" aria-label="Permalink to &quot;なぜ TypeScript で学ぶのか？&quot;">​</a></h2><p>フロントエンドの開発では、TypeScriptは近年ますます注目を集めています。 Web Components は JavaScript のみでも実装可能ですが、保守性や可読性の観点から TypeScript を活用する事例が増えつつあります。<br> また、TypeScript を用いることで次のような利点があります。</p><ul><li>クラスベースの実装との親和性が高い</li><li>属性やプロパティの型注釈により、明示的な設計が可能</li><li>カスタムイベントや DOM 操作にも型の恩恵がある</li><li>エディタ補完や静的解析による開発効率向上</li></ul><p>👉 <a href="/WebComponents-with-TypeScript/concepts/why-typescript.html">TypeScriptを使う理由とメリット</a> も参照ください。</p><h2 id="補足" tabindex="-1">補足 <a class="header-anchor" href="#補足" aria-label="Permalink to &quot;補足&quot;">​</a></h2><p>このコンテンツは、「人とAIが共に学び合う教材」として、実用性と拡張性を重視しながら、時代に応じて進化し続けることを目指しています。</p>',16)]))}const m=t(r,[["render",o]]);export{d as __pageData,m as default};
