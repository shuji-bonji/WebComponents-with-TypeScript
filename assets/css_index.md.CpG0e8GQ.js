import{_ as a,c as o,o as t,a2 as s}from"./chunks/framework.d0B5J8SC.js";const p=JSON.parse('{"title":"CSS設計とベストプラクティス","description":"Web Components のための CSS 設計手法を解説。Shadow DOM による Scoped CSS のカプセル化、BEM 命名規則との併用、:host/:host-context 疑似クラスの活用、CSS Variables を用いた動的テーマ管理など、保守性と再利用性の高いスタイル設計を学びます。","frontmatter":{"title":"CSS設計とベストプラクティス","description":"Web Components のための CSS 設計手法を解説。Shadow DOM による Scoped CSS のカプセル化、BEM 命名規則との併用、:host/:host-context 疑似クラスの活用、CSS Variables を用いた動的テーマ管理など、保守性と再利用性の高いスタイル設計を学びます。"},"headers":[],"relativePath":"css/index.md","filePath":"css/index.md"}'),S={name:"css/index.md"};function d(i,e,r,c,l,n){return t(),o("div",null,e[0]||(e[0]=[s('<h1 id="css設計とベストプラクティス" tabindex="-1">CSS設計とベストプラクティス <a class="header-anchor" href="#css設計とベストプラクティス" aria-label="Permalink to &quot;CSS設計とベストプラクティス&quot;">​</a></h1><p>このセクションでは、Web Components のスタイリングを効率化し、再利用可能なコンポーネント設計を学びます。<br> CSS 設計の基本から、Scoped CSS、テーマ管理、BEM 設計まで、段階的に理解できるように解説しています。</p><h2 id="🔹-学習内容" tabindex="-1">🔹 学習内容 <a class="header-anchor" href="#🔹-学習内容" aria-label="Permalink to &quot;🔹 学習内容&quot;">​</a></h2><ul><li><a href="./bem-overview.html">BEM（Block Element Modifier）設計の基本</a></li><li><a href="./host-based-css-shadow-dom.html">Host-based CSS と Shadow DOM</a></li><li><a href="./scoped-css-shadow-dom.html">Scoped CSS と Shadow DOM</a></li><li><a href="./css-variables-theming.html">CSS Variables を用いたテーマ管理</a></li></ul><p>各トピックを順番に学ぶことで、スタイルのスコープ管理や CSS のカプセル化をマスターできます。<br> 特に <code>Scoped CSS</code> と <code>CSS Variables</code> を利用することで、Shadow DOM 内部と外部のスタイリングを安全かつ効率的に管理できます。</p>',5)]))}const m=a(S,[["render",d]]);export{p as __pageData,m as default};
